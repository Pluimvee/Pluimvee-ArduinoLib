#include <Timer.h>
#include <time.h>

////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////
Timer::Timer(uint32_t ms) {
  set(ms);
}

// set the current time
void Timer::start() {
  _start = millis();  
}

// set the alarm and restart
void Timer::set(uint32_t ms) {
  _alarm = ms;
  start();
}

// check the alarm
bool Timer::passed() const {
  return elapsed() > _alarm;
}

////////////////////////////////////////////////////////////////////////////////////////////
// getters
int Timer::seconds() const {
  return elapsed() / 1000;
}

int Timer::minutes() const {
  return seconds() / 60;
}

String Timer::stamp() const {
  uint32_t e = elapsed();
  char buf[32];
  sprintf(buf, "%02d:%02d:%03d", e/60000,e/1000%60, e%1000);
  return String(buf);
}

////////////////////////////////////////////////////////////////////////////////////////////
/** get the millis after _start with overflow correction **/
uint32_t Timer::elapsed() const {
  uint32_t now = millis();
  if (now < _start) 
    return (uint32_t)0xFFFFFFFF - _start + now;

  return now - _start;
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

